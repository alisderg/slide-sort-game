#include<gl/glut.h>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>
#include<string.h>
int a=0,b=0,row,col,left,right,up,down,empty=16,rd,on=1,hour=0,min=0,sec=0;
float transHorizontal=0.0,transVertical=0.0,startTime=0.0,endTime=0.0,timeTaken=0.0,msec=0.0;
GLfloat vertices[16][4][3]={
{{-0.8,0.4,0.0},{-0.8,0.8,0.0},{-0.4,0.8,0.0},{-0.4,0.4,0.0}},	//1
{{-0.4,0.4,0.0},{-0.4,0.8,0.0},{0.0,0.8,0.0},{0.0,0.4,0.0}},	//2
{{0.0,0.4,0.0},{0.0,0.8,0.0},{0.4,0.8,0.0},{0.4,0.4,0.0}},		//3
{{0.4,0.4,0.0},{0.4,0.8,0.0},{0.8,0.8,0.0},{0.8,0.4,0.0}},		//4

{{-0.8,0.0,0.0},{-0.8,0.4,0.0},{-0.4,0.4,0.0},{-0.4,0.0,0.0}},	//5
{{-0.4,0.0,0.0},{-0.4,0.4,0.0},{0.0,0.4,0.0},{0.0,0.0,0.0}},	//6
{{0.0,0.0,0.0},{0.0,0.4,0.0},{0.4,0.4,0.0},{0.4,0.0,0.0}}, 	// 7
{{0.4,0.0,0.0},{0.4,0.4,0.0},{0.8,0.4,0.0},{0.8,0.0,0.0}},	//8

{{-0.8,-0.4,0.0},{-0.8,0.0,0.0},{-0.4,0.0,0.0},{-0.4,-0.4,0.0}},	//9
{{-0.4,-0.4,0.0},{-0.4,0.0,0.0},{0.0,0.0,0.0},{0.0,-0.4,0.0}},		//10
{{0.0,0.0,0.0},{0.4,0.0,0.0},{0.4,-0.4,0.0},{0.0,-0.4,0.0}},	//11
{{0.4,0.0,0.0},{0.8,0.0,0.0},{0.8,-0.4,0.0},{0.4,-0.4,0.0}},	//12

{{-0.8,-0.8,0.0},{-0.8,-0.4,0.0},{-0.4,-0.4,0.0},{-0.4,-0.8,0.0}},		//13
{{-0.4,-0.8,0.0},{-0.4,-0.4,0.0},{0.0,-0.4,0.0},{0.0,-0.8,0.0}},		//14
{{0.0,-0.8,0.0},{0.0,-0.4,0.0},{0.4,-0.4,0.0},{0.4,-0.8,0.0}},		//15
{{0.4,-0.8,0.0},{0.4,-0.4,0.0},{0.8,-0.4,0.0},{0.8,-0.8,0.0}},		//16
 };
GLfloat color[16][3]={ 
{0.0,0.40,0.50},{0.20,0.40,0.50},{0.40,0.40,0.50},{0.60,0.40,0.50},
{0.0,0.50,0.50},{0.20,0.50,0.50},{0.40,0.50,0.50},{0.60,0.50,0.50},
{0.0,0.50,0.80},{0.20,0.50,0.80},{0.40,0.50,0.80},{0.60,0.50,0.80},
{0.0,0.20,0.50},{0.20,0.20,0.5},{0.4,0.20,0.50},{0.20,0.20,0.20}
};
GLfloat positionH[16]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
GLfloat positionV[16]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
int order[4][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
char label[17]="aABCDEFGHIJKLMNO";
GLfloat mid[15][3]={
{-0.62,0.58,0.0},{-0.22,0.58,0.0},{0.18,0.58,0.0},{0.58,0.58,0.0},
{-0.62,0.18,0.0},{-0.22,0.18,0.0},{0.18,0.18,0.0},{0.58,0.18,0.0},
{-0.62,-0.22,0.0},{-0.22,-0.22,0.0},{0.18,-0.22,0.0},{0.58,-0.22,0.0},
{-0.62,-0.62,0.0},{-0.22,-0.62,0.0},{0.18,-0.62,0.0}
};
char rankMin[2],rankSec[2];
float rankTimeTaken=0.0;
float time()		//returns the no.of second of current time
{	
	clock_t tm=clock();
	return (float)tm/CLOCKS_PER_SEC;	
}
void timeDetail()		//returns the sec and min using timeTaken value
{
	sec=timeTaken;
	while(sec>=60.0)
	{
		min++;
		sec=sec-60.00;
		if(min>=60)
		{
			hour++;
			min=min-60;
		}			
	}
}
void displayRank()		//the text display on the redcarpet side.
{
		glViewport(600.0,0.0,370.0,600.0);
		char hello[100]="SLiDE & SORT GAME";
		char hello2[100]="Game completed :)";
		char time[25]="(Minutes:Sec)";
		char restart[40]="F1: SHUFFLE    F2: QUIT";
		sprintf(rankMin,"%d",min);
		sprintf(rankSec,"%d",sec);
		glColor3f(1.0,1.0,1.0);
		glPushMatrix();
				glTranslatef(-0.7,0.6,0.0);
				glScalef(0.001,0.001,0.01);
				glLineWidth(3);

		for(int i=0;i<20;i++)
		{
				glutStrokeCharacter(GLUT_STROKE_ROMAN,hello[i]);
		}
		glPopMatrix();
		if(on==1)
		{
			glRasterPos3f(-0.7,0.2,0.0);
			for(int i=0;i<100;i++)
			{
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,hello2[i]);
				glFlush();
			}
			glPushMatrix();
			glTranslatef(-0.7,-0.1,0.0);
			glScalef(0.001,0.001,0.01);
			glLineWidth(3);
				glutStrokeCharacter(GLUT_STROKE_ROMAN,rankMin[0]);
				glutStrokeCharacter(GLUT_STROKE_ROMAN,' ');
				glutStrokeCharacter(GLUT_STROKE_ROMAN,':');
				glutStrokeCharacter(GLUT_STROKE_ROMAN,' ');
				glFlush();	
			glPopMatrix();
			glPushMatrix();
			glTranslatef(-0.4,-0.1,0.0);
			glScalef(0.001,0.001,0.01);
			glLineWidth(3);			
				glutStrokeCharacter(GLUT_STROKE_ROMAN,rankSec[0]);
				glutStrokeCharacter(GLUT_STROKE_ROMAN,rankSec[1]);
				glFlush();	
			glPopMatrix();
			glRasterPos3f(-0.1,-0.1,0.0);
			for(int i=0;i<25;i++)
			{
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,time[i]);
				glFlush();
			}	
		}
		glRasterPos3f(-0.7,-0.4,0.0);
		for(int i=0;i<40;i++)
		{
			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,restart[i]);
			glFlush();
		}
}
void shuffle(int rd);
void moveLeft(int left);
void moveRight(int right);
void moveUp(int up);
void moveDown(int down);
void displayBoard()		//the background board of the cubes.
{
	glColor3f(0.50,0.50,0.50);
	glViewport(0.0,0.0,600.0,600.0);
	glBegin(GL_POLYGON);
	glVertex3f(-0.9,-0.9,0.0);
	glVertex3f(-0.9,0.90,0.0);
	glVertex3f(0.90,0.90,0.0);
	glVertex3f(0.9,-0.90,0.0);
	glEnd();
	glFlush();
}
void sideBoard()		//the red color board
{
	glViewport(600.0,0.0,370.0,600.0);
	glColor3f(1.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex3f(-1.0,-0.9,0.0);
	glVertex3f(-1.0,0.9,0.0);
	glVertex3f(1.0,0.9,0.0);
	glVertex3f(1.0,-0.9,0.0);
	glEnd();
	glFlush();
}
void nextDisplay()		// present in display() and up,down,left,right 
{
	glViewport(600.0,0.0,370.0,600.0);
	sideBoard();
	displayRank();
}

// the belows are the func. for the cube. 16 cubes. cube0 is emptyspace.
void cube1()
{
	glColor3fv(color[0]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[0][0]);
	glVertex3fv(vertices[0][1]);
	glVertex3fv(vertices[0][2]);
	glVertex3fv(vertices[0][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[0]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[1]);
	glFlush();
}
void cube2()
{
	glColor3fv(color[1]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[1][0]);
	glVertex3fv(vertices[1][1]);
	glVertex3fv(vertices[1][2]);
	glVertex3fv(vertices[1][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[1]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[2]);
	glFlush();	
}
void cube3()
{
	glColor3fv(color[2]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[2][0]);
	glVertex3fv(vertices[2][1]);
	glVertex3fv(vertices[2][2]);
	glVertex3fv(vertices[2][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[2]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[3]);
	glFlush();	
}
void cube4()
{
	glColor3fv(color[3]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[3][0]);
	glVertex3fv(vertices[3][1]);
	glVertex3fv(vertices[3][2]);
	glVertex3fv(vertices[3][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[3]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[4]);
	glFlush();	
}
void cube5()
{
	glColor3fv(color[4]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[4][0]);
	glVertex3fv(vertices[4][1]);
	glVertex3fv(vertices[4][2]);
	glVertex3fv(vertices[4][3]);
	glEnd();
		glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[4]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[5]);
	glFlush();	
}
void cube6()
{
	glColor3fv(color[5]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[5][0]);
	glVertex3fv(vertices[5][1]);
	glVertex3fv(vertices[5][2]);
	glVertex3fv(vertices[5][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[5]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[6]);
	glFlush();	
}
void cube7()
{
	glColor3fv(color[6]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[6][0]);
	glVertex3fv(vertices[6][1]);
	glVertex3fv(vertices[6][2]);
	glVertex3fv(vertices[6][3]);
	glEnd();
		glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[6]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[7]);
	glFlush();	
}
void cube8()
{
	glColor3fv(color[7]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[7][0]);
	glVertex3fv(vertices[7][1]);
	glVertex3fv(vertices[7][2]);
	glVertex3fv(vertices[7][3]);
	glEnd();
		glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[7]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[8]);
	glFlush();
}
void cube9()
{
	glColor3fv(color[8]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[8][0]);
	glVertex3fv(vertices[8][1]);
	glVertex3fv(vertices[8][2]);
	glVertex3fv(vertices[8][3]);
	glEnd();
		glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[8]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[9]);
	glFlush();	
}
void cube10()
{
	glColor3fv(color[9]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[9][0]);
	glVertex3fv(vertices[9][1]);
	glVertex3fv(vertices[9][2]);
	glVertex3fv(vertices[9][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[9]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[10]);
	glFlush();	
}
void cube11()
{
	glColor3fv(color[10]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[10][0]);
	glVertex3fv(vertices[10][1]);
	glVertex3fv(vertices[10][2]);
	glVertex3fv(vertices[10][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[10]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[11]);
	glFlush();
}
void cube12()
{
	glColor3fv(color[11]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[11][0]);
	glVertex3fv(vertices[11][1]);
	glVertex3fv(vertices[11][2]);
	glVertex3fv(vertices[11][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[11]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[12]);
	glFlush();	
}
void cube13()
{
	glColor3fv(color[12]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[12][0]);
	glVertex3fv(vertices[12][1]);
	glVertex3fv(vertices[12][2]);
	glVertex3fv(vertices[12][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[12]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[13]);
	glFlush();	
}
void cube14()
{
	glColor3fv(color[13]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[13][0]);
	glVertex3fv(vertices[13][1]);
	glVertex3fv(vertices[13][2]);
	glVertex3fv(vertices[13][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[13]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[14]);
	glFlush();	
}
void cube15()
{
	glColor3fv(color[14]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[14][0]);
	glVertex3fv(vertices[14][1]);
	glVertex3fv(vertices[14][2]);
	glVertex3fv(vertices[14][3]);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glRasterPos3fv(mid[14]);
	glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,label[15]);
	glFlush();	
}
void cube0()
{
	glColor3fv(color[15]);
	glBegin(GL_POLYGON);
	glVertex3fv(vertices[15][0]);
	glVertex3fv(vertices[15][1]);
	glVertex3fv(vertices[15][2]);
	glVertex3fv(vertices[15][3]);
	glEnd();
	glFlush();
}
int game()		// checks if the game is sorted or not. present in key();
{
	int pre=0,now,count=0;
	for(int i=0;i<4;i++)
	for(int j=0;j<4;j++)
	{
		now=order[i][j];
		if(pre>now)
		{
			return 0;
		}
		else
		{	
			count++;
			pre=now;		
		}
		if(count==15 && order[3][3]==16)
			return 1;
	}
	
}
void shuffle(int rd)	//shuffels according to the random value in key():case f1;
{
	for(int i=0;i<4;i++)
	for(int j=0;j<4;j++)
		if(order[i][j]==empty)
		{
			row=i;
			col=j;
			break;
		}
	switch(rd)
	{
        case 0:
        	if(col==0)
        		break;
        	else
        	{
        		left=order[row][col-1];
        		moveLeft(left);
        		order[row][col]=left;
        		order[row][col-1]=empty;
        	}
			break;        				
        case 1:
			if(col==3)
				break;
			else
			{
				right=order[row][col+1];
				moveRight(right);
				order[row][col]=right;
        		order[row][col+1]=empty;
        	}
        	break;
        case 2:
        	if(row==0)
				break;
			else
			{
				up=order[row-1][col];
				moveUp(up);
			    order[row][col]=up;
        		order[row-1][col]=empty;
        	}
        	break;
        case 3:
			if(row==3)
				break;
			else
			{
				down=order[row+1][col];
				moveDown(down);
			    order[row][col]=down;
        		order[row+1][col]=empty;
        	}
        	break;        
	}
}
void displayCube(int i)		//to display cubes accorting to thier value. 
{
	glViewport(0.0,0.0,600.0,600.0);
	switch(i)
	{
		case 0: cube0();break;
		case 1: cube1();break;
		case 2: cube2();break;
		case 3: cube3();break;
		case 4: cube4();break;
		case 5: cube5();break;
		case 6: cube6();break;
		case 7: cube7();break;
		case 8: cube8();break;
		case 9: cube9();break;
		case 10: cube10();break;
		case 11: cube11();break;
		case 12: cube12();break;
		case 13: cube13();break;
		case 14: cube14();break;
		case 15: cube15();break;
		default: break;
	}
}
void display()
{
	glViewport(0.0,0.0,600.0,600.0);
	glClearColor(1.0,1.0,1.0,1.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	displayBoard();
	for(int i=0;i<16;i++)
	displayCube(i);
	nextDisplay();
	glFlush();	
}
void moveLeft(int left)		//move left when left arrow is clicked.
{
	positionH[left]+=0.4;
	positionH[empty]-=0.4;
    glClear(GL_COLOR_BUFFER_BIT);
    displayBoard();
    nextDisplay();
    for(int a=0;a<4;a++)
    for(int b=0;b<4;b++)
    {
		glPushMatrix();
		glTranslatef(positionH[order[a][b]],positionV[order[a][b]],0.0);
		displayCube(order[a][b]);
		glPopMatrix();
	}
}
void moveRight(int right)		//slides right side.
{
	positionH[right]-=0.4;
	positionH[empty]+=0.4;
    glClear(GL_COLOR_BUFFER_BIT);
    displayBoard();
    nextDisplay();
    for(int a=0;a<4;a++)
    for(int b=0;b<4;b++)
    {
		glPushMatrix();
		glTranslatef(positionH[order[a][b]],positionV[order[a][b]],0.0);
		displayCube(order[a][b]);
		glPopMatrix();
	}
}
void moveUp(int up)		//slides up to the empty space.
{
	positionV[up]-=0.4;
	positionV[empty]+=0.4;
    glClear(GL_COLOR_BUFFER_BIT);
   	displayBoard();
   	nextDisplay();
    for(int a=0;a<4;a++)
    for(int b=0;b<4;b++)
    {
		glPushMatrix();
		glTranslatef(positionH[order[a][b]],positionV[order[a][b]],0.0);
		displayCube(order[a][b]);
		glPopMatrix();
	}
}
void moveDown(int down)		//slides down to emptyspace.
{
	positionV[down]+=0.4;
	positionV[empty]-=0.4;
	glClear(GL_COLOR_BUFFER_BIT);
	displayBoard();
	nextDisplay();
    for(int a=0;a<4;a++)
    for(int b=0;b<4;b++)
    {
		glPushMatrix();
		glTranslatef(positionH[order[a][b]],positionV[order[a][b]],0.0);
		displayCube(order[a][b]);
		glPopMatrix();
	}
}
void mykey(int key,int x,int y)		//specal keyboard func. 
{ 
	if(on==1)
	{
		startTime=time();
		on=0;
		hour=0;
		min=0;
		sec=0.0;
	}
	for(int i=0;i<4;i++)
	for(int j=0;j<4;j++)
		if(order[i][j]==empty)
		{
			row=i;
			col=j;
			break;
		}
	switch(key)
	{
        case GLUT_KEY_RIGHT:
        	if(col==0)
        	{
        		break;
        	}
        	else
        	{
        		left=order[row][col-1];
        		moveLeft(left);
        		order[row][col]=left;
        		order[row][col-1]=empty;
        	}
			break;        				
        case GLUT_KEY_LEFT:
			if(col==3)
				break;
			else
			{
				right=order[row][col+1];
				moveRight(right);
				order[row][col]=right;
        		order[row][col+1]=empty;
			}
        	break;
        case GLUT_KEY_DOWN:
        	if(row==0)
				break;
			else
			{
				up=order[row-1][col];
				moveUp(up);
			    order[row][col]=up;
        		order[row-1][col]=empty;
			}
        	break;
        case GLUT_KEY_UP:
			if(row==3)
				break;
			else
			{
				down=order[row+1][col];
				moveDown(down);
			    order[row][col]=down;
        		order[row+1][col]=empty;
			}
        	break;   
			case GLUT_KEY_F1:
				for(int k=0;k<170;k++)
				{
					rd=rand()%4;
					shuffle(rd); 
				}
        		break;    
			case GLUT_KEY_F2:
				exit(0);
				break; 
	}
	if(game())
	{
		endTime=time();
		timeTaken=endTime-startTime;
		timeDetail();
		on=1;
		displayBoard();
		for(int i=0;i<16;i++)
		displayCube(i);
		nextDisplay();
	}
}
void myinit()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glMatrixMode(GL_MODELVIEW);
}
int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowSize(1000,600);
	glutCreateWindow("Slide&Sort game");
	glutDisplayFunc(display);
	glutSpecialFunc(mykey);
	myinit();
	glutMainLoop();
	return 0;
}
